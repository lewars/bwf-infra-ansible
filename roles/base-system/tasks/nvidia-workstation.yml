---
- name: Install NVIDIA packages
  ansible.builtin.dnf5:
    name:
      - akmod-nvidia
      - xorg-x11-drv-nvidia-cuda
      - xorg-x11-drv-nvidia-cuda-libs
      - kmodtool
      - mokutil
      - openssl
      - xorg-x11-drv-nvidia-power
      - nvidia-vaapi-driver
      - libva-utils
      - vdpauinfo
      - vulkan
    state: present
  when: base_system_enable_nvidia | bool

- name: Wait for NVIDIA driver installation
  when: base_system_enable_nvidia | bool
  block:
    - name: Wait for compilation to start
      ansible.builtin.pause:
        seconds: 10

    - name: Check for active compilation processes
      ansible.builtin.shell: |
        pgrep -i "{{ process_names_regex }}" && exit 1 || exit 0
      register: compilation_check
      until: compilation_check.rc == 0
      retries: "{{ nretries }}"
      delay: "{{ check_interval }}"
      changed_when: false
      failed_when: compilation_check.rc != 0
      ignore_errors: true
      vars:
        check_interval: 10
        wait_timeout: 300
        nretries: "{{ wait_timeout // check_interval }}"
        process_names_regex: '(gcc|make|rpmbuild)'

    - name: Initiate reboot after NVIDIA module is present
      ansible.builtin.reboot:
        reboot_timeout: 300
        msg: "Rebooting system after NVIDIA driver installation"
      when: false

    - name: Wait for the system to become reachable again
      ansible.builtin.wait_for_connection:
        timeout: 300
      when: false

    - name: Verify NVIDIA driver is loaded after reboot
      ansible.builtin.command:
        cmd: lsmod | grep nvidia
      register: nvidia_module_check
      changed_when: false
      when: false

    - name: Display NVIDIA module status after reboot
      ansible.builtin.debug:
        var: nvidia_module_check.stdout_lines
      when: false

    - name: Display NVIDIA installation completion message
      ansible.builtin.debug:
        msg: "NVIDIA driver installation and reboot complete."

- name: Enable nvidia-{suspend,resume,hibernate}
  ansible.builtin.systemd:
    name: "{{ item }}"
    enabled: true
    state: started
  loop:
    - nvidia-suspend.service
    - nvidia-resume.service
    - nvidia-hibernate.service
  changed_when: false
  when: base_system_enable_nvidia | bool

- name: Enable nvidia-persistenced
  ansible.builtin.systemd:
    name: nvidia-persistenced
    enabled: true
    state: started
  when: false

- name: Swap ffmpeg-free with ffmpeg
  ansible.builtin.command:
    cmd: "dnf swap -y ffmpeg-free ffmpeg --allowerasing"
  changed_when: false

- name: Remove PackageKit-gstreamer-plugin package
  ansible.builtin.dnf5:
    name: PackageKit-gstreamer-plugin
    state: absent
  changed_when: false

- name: Upgrade multimedia group (using dnf4 if available)
  ansible.builtin.command:
    cmd: "dnf4 group install -y multimedia"
  changed_when: false

- name: Install sound-and-video group
  ansible.builtin.command:
    cmd: "dnf group install -y sound-and-video"
  changed_when: false

- name: Install ffmpeg-libs, libva, and libva-utils
  ansible.builtin.dnf5:
    name:
      - ffmpeg-libs
      - libva
      - libva-utils
    state: present

- name: Swap libva-intel-media-driver with intel-media-driver
  ansible.builtin.command:
    cmd: "dnf swap -y libva-intel-media-driver intel-media-driver --allowerasing"
  changed_when: false

- name: Install libva-intel-driver
  ansible.builtin.dnf5:
    name: libva-intel-driver
    state: present
