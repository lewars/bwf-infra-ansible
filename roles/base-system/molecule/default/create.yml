---
- name: Create VM instances for molecule tests
  hosts: localhost
  connection: local
  gather_facts: false
  vars:
    ssh_user: molecule
    ssh_port: 22
    ssh_key_path: "{{ lookup('env', 'MOLECULE_EPHEMERAL_DIRECTORY') }}/ssh_key"
    base_image_download: true
    base_image_name: "Fedora-Cloud-Base-Generic-41-1.4.x86_64.qcow2"
    base_image_local_path: "{{ lookup('env', 'HOME') }}/.local/share/molecule/base_images/{{ base_image_name }}"
    base_image_url: "https://download.fedoraproject.org/pub/fedora/linux/releases/41/Cloud/x86_64/images/{{ base_image_name }}"
    base_image_checksum_url: "https://download.fedoraproject.org/pub/fedora/linux/releases/41/Cloud/x86_64/images/Fedora-Cloud-41-1.4-x86_64-CHECKSUM"
    base_image_checksum: "{{ lookup('env', 'HOME') }}/.local/share/molecule/base_images/Fedora-Cloud-41-1.4-x86_64-CHECKSUM"
    fedora_gpg_key: "{{ lookup('env', 'XDG_RUNTIME_DIR') }}/fedora.gpg"
    fedora_gpg_key_fingerprint: "466CF2D8B60BC3057AA9453ED0622462E99D6AD1"
    fedora_gpg_opengpgkey: "4708da3c8d2e316f3321396cfb18e064f90a361490165d2723a63730._openpgpkey.fedoraproject.org"
    image_path: "{{ lookup('env', 'MOLECULE_EPHEMERAL_DIRECTORY') }}/{{ molecule_yml.platforms[0].instance_name }}.qcow2"
    cloud_init_path: "{{ lookup('env', 'MOLECULE_EPHEMERAL_DIRECTORY') }}/{{ molecule_yml.platforms[0].instance_name }}-cloud-init.iso"
    qemu_pid_file: "{{ lookup('env', 'XDG_RUNTIME_DIR') }}/{{ molecule_yml.platforms[0].instance_name }}.pid"
    molecule_instance_config: "{{ lookup('env', 'MOLECULE_INSTANCE_CONFIG') }}"

  tasks:
    - name: Print molecule variables and environment variables
      ansible.builtin.debug:
        msg:
          - "===== MOLECULE VARIABLES ====="
          - "ssh_user: {{ ssh_user }}"
          - "ssh_port: {{ ssh_port }}"
          - "ssh_key_path: {{ ssh_key_path }}"
          - "base_image_download: {{ base_image_download }}"
          - "base_image_name: {{ base_image_name }}"
          - "base_image_local_path: {{ base_image_local_path }}"
          - "base_image_url: {{ base_image_url }}"
          - "image_path: {{ image_path }}"
          - "cloud_init_path: {{ cloud_init_path }}"
          - "qemu_pid_file: {{ qemu_pid_file }}"
          - "molecule_instance_config: {{ molecule_instance_config }}"
          - "base_image_checksum_url: {{ base_image_checksum_url }}"
          - "base_image_checksum: {{ base_image_checksum }}"
          - "fedora_gpg_key: {{ fedora_gpg_key }}"
          - "fedora_gpg_key_fingerprint: {{ fedora_gpg_key_fingerprint }}"
          - "fedora_gpg_opengpgkey: {{ fedora_gpg_opengpgkey }}"
          - ""
          - "===== ANSIBLE ENVIRONMENT ====="
          - "ANSIBLE_CONFIG: {{ lookup('env', 'ANSIBLE_CONFIG') }}"
          - "ANSIBLE_FORCE_COLOR: {{ lookup('env', 'ANSIBLE_FORCE_COLOR') }}"
          - "ANSIBLE_ROLES_PATH: {{ lookup('env', 'ANSIBLE_ROLES_PATH') }}"
          - ""
          - "===== MOLECULE ENVIRONMENT ====="
          - "MOLECULE_DEBUG: {{ lookup('env', 'MOLECULE_DEBUG') }}"
          - "MOLECULE_DEPENDENCY_NAME: {{ lookup('env', 'MOLECULE_DEPENDENCY_NAME') }}"
          - "MOLECULE_DRIVER_NAME: {{ lookup('env', 'MOLECULE_DRIVER_NAME') }}"
          - "MOLECULE_ENV_FILE: {{ lookup('env', 'MOLECULE_ENV_FILE') }}"
          - "MOLECULE_EPHEMERAL_DIRECTORY: {{ lookup('env', 'MOLECULE_EPHEMERAL_DIRECTORY') }}"
          - "MOLECULE_FILE: {{ lookup('env', 'MOLECULE_FILE') }}"
          - "MOLECULE_INSTANCE_CONFIG: {{ lookup('env', 'MOLECULE_INSTANCE_CONFIG') }}"
          - "MOLECULE_INVENTORY_FILE: {{ lookup('env', 'MOLECULE_INVENTORY_FILE') }}"
          - "MOLECULE_PROJECT_DIRECTORY: {{ lookup('env', 'MOLECULE_PROJECT_DIRECTORY') }}"
          - "MOLECULE_PROVISIONER_NAME: {{ lookup('env', 'MOLECULE_PROVISIONER_NAME') }}"
          - "MOLECULE_SCENARIO_DIRECTORY: {{ lookup('env', 'MOLECULE_SCENARIO_DIRECTORY') }}"
          - "MOLECULE_SCENARIO_NAME: {{ lookup('env', 'MOLECULE_SCENARIO_NAME') }}"
          - "MOLECULE_STATE_FILE: {{ lookup('env', 'MOLECULE_STATE_FILE') }}"
          - "MOLECULE_VERIFIER_NAME: {{ lookup('env', 'MOLECULE_VERIFIER_NAME') }}"
          - "MOLECULE_VERIFIER_TEST_DIRECTORY: {{ lookup('env', 'MOLECULE_VERIFIER_TEST_DIRECTORY') }}"

    - name: Create base images directory
      ansible.builtin.file:
        path: "{{ lookup('env', 'HOME') }}/.local/share/molecule/base_images"
        state: directory
        mode: "0755"
      when: base_image_download

    - name: Check if base image is present
      stat:
        path: "{{ base_image_local_path }}"
      register: base_image_file

    - name: Download base image
      ansible.builtin.get_url:
        url: "{{ base_image_url }}"
        dest: "{{ base_image_local_path }}"
        mode: "0644"
      when: not base_image_file.stat.exists

    - name: Check if base image checksum is present
      stat:
        path: "{{ base_image_checksum }}"
      register: base_image_file_checksum

    - name: Download Fedora checksum file
      ansible.builtin.get_url:
        url: "{{ base_image_checksum_url }}"
        dest: "{{ base_image_checksum }}"
        mode: "0644"
      when: not base_image_file_checksum.stat.exists
      register: checksum_download

    - name: Check if Fedora GPG key is already imported
      ansible.builtin.shell:
        cmd: gpg --fingerprint "{{ fedora_gpg_key_fingerprint }}"
      become: true
      register: gpg_key_check
      changed_when: false
      failed_when: false
      check_mode: false

    - name: Download and verify Fedora GPG key
      block:
        - name: Download Fedora GPG key
          ansible.builtin.get_url:
            url: "https://fedoraproject.org/fedora.gpg"
            dest: "{{ fedora_gpg_key }}"
            mode: '0644'
            owner: root
            group: root
          register: gpg_key_download

        - name: Get key information
          ansible.builtin.shell:
            cmd: "gpg --show-keys --with-fingerprint {{ fedora_gpg_key }} | grep -P -e '^\\s+' | tr -d ' '"
          register: gpg_key_info
          changed_when: false

        - name: Debug GPG key information
          ansible.builtin.debug:
            msg: "GPG Key Info: {{ gpg_key_info.stdout }}"

        - name: Verify key fingerprint
          ansible.builtin.assert:
            that:
              - "fedora_gpg_key_fingerprint in gpg_key_info.stdout"
            fail_msg: "GPG key fingerprint verification failed"
            success_msg: "GPG key fingerprint verified successfully"

        - name: Check if DNS OpenPGP key verification is available
          ansible.builtin.command:
            cmd: command -v dirmngr
          register: dirmngr_check
          changed_when: false
          failed_when: false

        - name: Verify key via DNS OpenPGP (if available)
          ansible.builtin.shell:
            cmd: 'printf "N\n" | gpg --fetch-keys "dns:{{ fedora_gpg_opengpgkey }}?type=OPENPGPKEY"'
          register: dns_verification
          failed_when: false
          changed_when: false
          when: dirmngr_check.rc == 0

        - name: Import GPG key to system keyring
          ansible.builtin.command:
            cmd: "gpg --import {{ fedora_gpg_key }}"
          register: import_result
          changed_when: import_result.rc == 0
          failed_when: import_result.rc != 0
          when: fedora_gpg_key_fingerprint in gpg_key_info.stdout
      become: true
      when: gpg_key_check.rc != 0

    - name: Verify checksum file signature
      ansible.builtin.command:
        cmd: gpgv --keyring ./fedora.gpg Fedora-Cloud-41-1.4-x86_64-CHECKSUM
        chdir: "{{ lookup('env', 'HOME') }}/.local/share/molecule/base_images"
      when: base_image_download and checksum_download.changed
      register: gpg_verify
      changed_when: false
      failed_when: gpg_verify.rc != 0

    - name: Verify image with checksum
      ansible.builtin.command:
        cmd: sha256sum --ignore-missing -c Fedora-Cloud-41-1.4-x86_64-CHECKSUM
        chdir: "{{ lookup('env', 'HOME') }}/.local/share/molecule/base_images"
      when: base_image_download and checksum_download.changed
      register: checksum_verify
      changed_when: false
      failed_when: checksum_verify.rc != 0

    - name: Create working directories for molecule
      ansible.builtin.file:
        path: "{{ lookup('env', 'MOLECULE_EPHEMERAL_DIRECTORY') }}"
        state: directory
        mode: "0755"

    - name: Check for existing molecule instance disk
      ansible.builtin.stat:
        path: "{{ image_path }}"
      register: instance_disk

    - name: Create instance disk from base image
      ansible.builtin.command: >
        qemu-img create -f qcow2 -F qcow2
        -b {{ base_image_local_path }}
        {{ image_path }} 20G
      when: not instance_disk.stat.exists

    - name: Generate SSH key if it doesn't exist
      community.crypto.openssh_keypair:
        path: "{{ ssh_key_path }}"
        type: rsa
        size: 4096
      register: ssh_key

    - name: Create temporary directory for cloud-init files
      ansible.builtin.tempfile:
        state: directory
        prefix: "molecule-{{ molecule_yml.platforms[0].instance_name }}-"
      register: temp_dir
      delegate_to: localhost

    - name: Prepare cloud-init user-data file
      ansible.builtin.copy:
        dest: "{{ temp_dir.path }}/user-data"
        content: |
          #cloud-config
          hostname: bwf-test-host
          users:
            - name: {{ ssh_user }}
              sudo: ALL=(ALL) NOPASSWD:ALL
              groups: sudo
              shell: /bin/bash
              ssh_authorized_keys:
                - {{ lookup('file', ssh_key_path + '.pub') }}

    - name: Generate cloud-init ISO
      ansible.builtin.command: >
        cloud-localds {{ cloud_init_path }}
        {{ temp_dir.path }}/user-data

    - name: Start the VM instance using qemu-system-x86_64
      ansible.builtin.shell: >
        qemu-system-x86_64
        -name {{ molecule_yml.platforms[0].instance_name }}
        -machine type=q35,accel=kvm:tcg
        -cpu host
        -smp {{ molecule_yml.platforms[0].cpus | default(4) }}
        -m {{ molecule_yml.platforms[0].memory | default(4096) }}
        -drive file={{ image_path }},format=qcow2
        -drive file={{ cloud_init_path }},format=raw
        -netdev user,id=net0,hostfwd=tcp::2222-:22
        -device virtio-net-pci,netdev=net0
        -display none
        -daemonize
        -pidfile {{ qemu_pid_file }}
      register: qemu_start_result

    - name: Get VM pid
      ansible.builtin.command: "cat {{ qemu_pid_file }}"
      register: vm_pid
      changed_when: false

    - name: Wait 5 seconds for VM to initialize
      ansible.builtin.pause:
        seconds: 5

    - name: Set VM SSH port fact
      ansible.builtin.set_fact:
        vm_ssh_port: 2222

    - name: Add VM IP to inventory
      ansible.builtin.add_host:
        name: "{{ molecule_yml.platforms[0].name }}"
        ansible_host: "127.0.0.1"
        ansible_port: "{{ vm_ssh_port }}"
        ansible_user: "{{ ssh_user }}"
        ansible_private_key_file: "{{ ssh_key_path }}"
        ansible_ssh_common_args: "-o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null"
        groups: all

    - name: Wait for SSH to become available
      ansible.builtin.wait_for:
        host: 127.0.0.1
        port: "{{ vm_ssh_port }}"
        delay: 5
        timeout: 300
      register: ssh_ready

    - name: Dump instance config
      ansible.builtin.copy:
        content: |
          ---
          # Molecule managed
          - instance: "{{ molecule_yml.platforms[0].instance_name }}"
            address: "127.0.0.1"
            user: "{{ ssh_user }}"
            port: "{{ vm_ssh_port }}"
            shell_type: sh
            identity_file: "{{ ssh_key_path }}"
            pid_file: "{{ qemu_pid_file }}"
        dest: "{{ molecule_instance_config }}"
        mode: 0600
